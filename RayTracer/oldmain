// Create the main window
sf::RenderWindow window(sf::VideoMode(width,height), "SFML window");

// Set the Icon
sf::Image icon;
if (!icon.loadFromFile(resourcePath() + "icon.png")) {
return EXIT_FAILURE;
}
window.setIcon(icon.getSize().x, icon.getSize().y, icon.getPixelsPtr());

// Load a sprite to display
sf::Texture texture;


std::vector<Shape*> scene;

Sphere redSphere(sf::Vector3<double>(20,0,0), 1, 0.05, 1, .5, sf::Color(100,0,0), .001);

//Sphere redSphere(sf::Vector3<double>(-1,0,2), 0.6, 0.05, 1, .5, sf::Color::Red, .3);

//Sphere greenSphere(sf::Vector3<double>(5,-.5,-1), .8, 0.05, 1, .5, sf::Color(0,255,0), .5);

Plane greyPlane(sf::Vector3<double>(0,0,-1.5), normalize(sf::Vector3<double>(0,.3,1)), 0.05, 1, .5, sf::Color(200,200,200), .8);


std::cout<<greyPlane.intersect(sf::Vector3<double>(0,0,0), normalize(sf::Vector3<double>(1,0,-0.5)));

scene.push_back(&redSphere);
//scene.push_back(&redSphere);
//scene.push_back(&greenSphere);
scene.push_back(&greyPlane);

for(int aPIX = 0; aPIX < width; aPIX++){
for(int bPIX = 0; bPIX < height;bPIX++){

std::cout<<"progress: " + std::to_string((double)aPIX/width)<<std::endl;

double aPOS = viewport[0] + ( (viewport[2]-viewport[0]) * (double(aPIX)/double(width-1)) );
double bPOS = viewport[1] + ( (viewport[3]-viewport[1]) * (double(bPIX)/double(height-1)) );
bPOS = -bPOS;
aPOS = -aPOS;
double cPOS = 1;


sf::Vector3<double> focusPoint(cPOS,aPOS,bPOS);



//if we want a linspace from min to max, if we have x samples from 0...x-1
//then for sample g we should return min + (max-min)(g)/(x-1)
//x - 1 because if we want three samples between 0 and 1, we go by halves, we are including min and max

sf::Color thisColor = Raytrace(scene, cameraPosition, normalize(focusPoint-cameraPosition));
thisColor = clamp(thisColor);
/*

std::cout<<int(thisColor.r)<<", ";
std::cout<<int(thisColor.g)<<", ";
std::cout<<int(thisColor.b)<<", ";
std::cout<<int(thisColor.a)<<", "<<std::endl;
*/

pixels[(aPIX+bPIX*width)*4] = thisColor.r;//r
pixels[(aPIX+bPIX*width)*4 + 1] = thisColor.g;//g
pixels[(aPIX+bPIX*width)*4 + 2] = thisColor.b;//b
pixels[(aPIX+bPIX*width)*4 + 3] = thisColor.a;//a

}

}




texture.create(width, height);
texture.update(pixels);


sf::Sprite sprite(texture);


// Start the game loop
while (window.isOpen())
{
// Process events
sf::Event event;
while (window.pollEvent(event))
{
// Close window: exit
if (event.type == sf::Event::Closed) {
window.close();
}

// Escape pressed: exit
if (event.type == sf::Event::KeyPressed && event.key.code == sf::Keyboard::Escape) {
window.close();
}
}



// Clear screen
window.clear();

// Draw the sprite
window.draw(sprite);


// Update the window
window.display();
}

